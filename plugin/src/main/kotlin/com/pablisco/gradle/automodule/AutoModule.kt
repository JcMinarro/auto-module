package com.pablisco.gradle.automodule

import com.pablisco.gradle.automodule.filetree.FileTreeScope
import java.io.File
import java.nio.file.Path

object AutoModule {

    var buildModulesRoot: String = "gradle"
    var versions: String = "versions.properties"
    internal val ignored: MutableList<String> = mutableListOf()
    internal var pluginRepositoryPath: String? = null

    internal val templates: MutableList<AutoModuleTemplate> = mutableListOf()

    /**
     * Used, in development, to add a repository to the generated code to look for itself.
     */
    @Suppress("unused") // Api
    fun pluginRepository(repositoryPath: Path) {
        pluginRepositoryPath = repositoryPath.toUri().toString()
    }

    @Suppress("unused") // Api
    fun pluginRepository(repositoryFile: File) {
        pluginRepository(repositoryFile.toPath())
    }

    /**
     * Adds the **absolute** path to any module that we want to ignore.
     *
     * @see [ignored]
     */
    @Suppress("unused") // Api
    fun ignore(vararg modules: String) {
        ignored += modules
    }

    /**
     * Add a new template to generate a task with the name `create{Name}Module` that can be used
     * to create new module
     *
     * @param type The type for the modules generated by this template
     * @param path Optional path for where to create the modules
     * @param files Lambda in charge of creating the files for the created module
     */
    @Suppress("unused") // Api
    fun template(type: String, path: String? = null, files: FileTreeScope.() -> Unit) {
        templates += AutoModuleTemplate(type, path, files)
    }

}

internal data class AutoModuleTemplate(
    val name: String,
    val path: String?,
    val files: ApplyTemplateScope.() -> Unit
)
